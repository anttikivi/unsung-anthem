#!/bin/sh

# Copyright (c) 2020 Antti Kivi
# Licensed under the Effective Elegy Licence

set -e

readonly COMPOSER_VERSION="$(cat ${0%/*}/composer-version)"
readonly COMPOSER_VERSION_TAG="v$COMPOSER_VERSION"
readonly COMPOSER_NAME="Couplet Composer"
readonly ODE_NAME="Obliging Ode"
readonly ANTHEM_NAME="Unsung Anthem"

echo "Running the set-up shell script for $COMPOSER_NAME $COMPOSER_VERSION, \
the build script of $ODE_NAME and $ANTHEM_NAME"

readonly GITHUB_URL="https://github.com"
readonly COMPOSER_REPO_OWNER="anttikivi"
readonly COMPOSER_REPO_NAME="couplet-composer"
readonly COMPOSER_REPO_URL="$GITHUB_URL/$COMPOSER_REPO_OWNER/\
$COMPOSER_REPO_NAME.git"

# Set the required version of Python.

if [ -z "${COMPOSER_PYTHON_VERSION+x}" ]; then
  COMPOSER_PYTHON_VERSION="3"
fi

echo "The Python version is set to $COMPOSER_PYTHON_VERSION"

readonly IN_TREE_BUILD_OPTION="--in-tree-build"

# See if the build should be done in tree.

in_tree_build=false

for arg in "$@"; do
  if [ "$arg" = "$IN_TREE_BUILD_OPTION" ]; then
    in_tree_build=true
  fi
done

echo "The value for in-tree build is set to $in_tree_build"

# Switch to the correct directory.

if [ "$in_tree_build" = false ]; then
  cd ..
fi

echo "The working directory is set to $PWD"

readonly SCRIPT_DIRECTORY_NAME="script"
readonly COMPOSER_DIRECTORY_BASE_NAME="composer"
readonly COMPOSER_DIRECTORY_NAME="${COMPOSER_DIRECTORY_BASE_NAME}_\
$(echo $COMPOSER_VERSION | tr '.' '_' | tr '-' '_')"
readonly COMPOSER_HEAD_DIRECTORY_NAME="${COMPOSER_DIRECTORY_BASE_NAME}_head"
readonly COMPOSER_LOCAL_DIRECTORY_NAME="${COMPOSER_DIRECTORY_BASE_NAME}_local"

if [ "$in_tree_build" = true ]; then
  readonly BUILD_DIRECTORY_NAME="build"
  readonly BUILD_DIRECTORY="$PWD/$BUILD_DIRECTORY_NAME"
  readonly SCRIPT_DIRECTORY="$BUILD_DIRECTORY/$SCRIPT_DIRECTORY_NAME"

  if [ ! -d "$BUILD_DIRECTORY" ]; then
    mkdir $BUILD_DIRECTORY
    echo "Created the directory '$BUILD_DIRECTORY'"
  fi
else
  readonly SCRIPT_DIRECTORY="$PWD/$SCRIPT_DIRECTORY_NAME"
fi

# Install pipenv.

command -v pipenv >/dev/null 2>&1 || {
  echo >&2 "Didn't find pipenv. Installing."
  pip install pipenv
}

rm ./Pipfile
rm ./Pipfile.lock

# Set up the script directory.

if [ ! -d "$SCRIPT_DIRECTORY" ]; then
  mkdir $SCRIPT_DIRECTORY
  echo "Created the directory '$SCRIPT_DIRECTORY'"
fi

reset_pipfile=false

# Clone Couplet Composer.

if [ "$ODE_DEVELOPMENT_COMPOSER" = true ]; then
  echo "Using development version of $COMPOSER_NAME"

  composer_directory="$SCRIPT_DIRECTORY/$COMPOSER_HEAD_DIRECTORY_NAME"
  composer_remote="origin"
  composer_remote_branch="$composer_remote/develop"

  # If the Composer directory doesn't exist, there is no need to check for the
  # remote HEAD SHA1.
  if [ ! -d "$composer_directory" ]; then
    echo "The directory '$composer_directory' doesn't exist and, thus, \
$COMPOSER_NAME will be cloned"

    git clone $COMPOSER_REPO_URL $composer_directory
    head_sha="$(git -C "$composer_directory" rev-parse HEAD)"

    echo "The SHA1 for the currently cloned HEAD of $COMPOSER_NAME is $head_sha"
  else
    git -C $composer_directory fetch
    head_sha="$(git -C $composer_directory rev-parse HEAD)"
    remote_sha="$(git -C $composer_directory rev-parse $composer_remote_branch)"

    echo "The SHA1 for the currently cloned HEAD of $COMPOSER_NAME is $head_sha"
    echo "The SHA1 for $composer_remote_branch of $COMPOSER_NAME is $remote_sha"

    if [ "$head_sha" != "$remote_sha" ]; then
      echo "The SHA1's for $composer_remote_branch and local HEAD of \
$COMPOSER_NAME don't match and thus the local copy will be reset"
      git -C $composer_directory reset --hard HEAD
      git -C $composer_directory clean -xffd
      git -C $composer_directory pull
    fi
  fi
  echo "The latest development version of $COMPOSER_NAME is now set up"
elif [ "$ODE_LOCAL_COMPOSER" = true ]; then
  echo "Using the local development version of $COMPOSER_NAME"

  composer_directory="$SCRIPT_DIRECTORY/$COMPOSER_LOCAL_DIRECTORY_NAME"
  composer_local_repo="$PWD/couplet-composer"
  composer_remote="origin"

  # If the Composer directory doesn't exist, there is no need to check for the
  # local repository HEAD SHA1.
  if [ ! -d "$composer_directory" ]; then
    echo "The directory '$composer_directory' doesn't exist and, thus, \
$COMPOSER_NAME will be cloned from the local repository"

    git clone $composer_local_repo $composer_directory
    head_sha="$(git -C "$composer_directory" rev-parse HEAD)"

    echo "The SHA1 for the currently cloned local HEAD of $COMPOSER_NAME is \
$head_sha"
  else
    current_branch="$(git -C $composer_directory rev-parse --abbrev-ref HEAD)"
    local_branch="$(git -C $composer_local_repo rev-parse --abbrev-ref HEAD)"

    echo "The current branch in $composer_directory is $current_branch"
    echo "The current branch of the remote $composer_remote is $local_branch"

    if [ "$current_branch" != "$local_branch" ]; then
      git -C $composer_directory fetch $composer_remote
      git -C $composer_directory checkout -b $local_branch \
$composer_remote/$local_branch
    fi

    git -C $composer_directory fetch $composer_remote
    head_sha="$(git -C $composer_directory rev-parse HEAD)"
    remote_sha="$(git -C $composer_directory rev-parse \
$composer_remote/$local_branch)"

    echo "The SHA1 for the currently cloned local HEAD of $COMPOSER_NAME is \
$head_sha"
    echo "The SHA1 for $composer_remote/$local_branch of $COMPOSER_NAME is \
$remote_sha"

    if [ "$head_sha" != "$remote_sha" ]; then
      echo "The SHA1's for $composer_remote/$local_branch and local HEAD of \
$COMPOSER_NAME don't match and thus the copy will be reset"
      git -C $composer_directory reset --hard HEAD
      git -C $composer_directory clean -xffd
      git -C $composer_directory pull
    fi
  fi
  echo "The latest local development version of $COMPOSER_NAME is now set up"
else
  composer_directory="$SCRIPT_DIRECTORY/$COMPOSER_DIRECTORY_NAME"

  if [ ! -d "$composer_directory" ]; then
    git clone $COMPOSER_REPO_URL $composer_directory
    git -C $composer_directory checkout tags/$COMPOSER_VERSION_TAG \
-b local_install_$COMPOSER_VERSION_TAG
    reset_pipfile=true
  fi
fi

# if pipenv graph | grep -q 'couplet-composer'; then
#    echo "matched"
# fi

# TODO Run install only if the correct version of Couplet Composer isn't already installed
pipenv install $composer_directory --python $COMPOSER_PYTHON_VERSION
