#!/bin/sh

# Copyright (c) 2020 Antti Kivi
# Licensed under the Effective Elegy Licence

set -ex

readonly COMPOSER_VERSION="$(cat ${0%/*}/composer-version)"
readonly COMPOSER_VERSION_TAG="v$COMPOSER_VERSION"
readonly COMPOSER_NAME="Couplet Composer"
readonly ODE_NAME="Obliging Ode"
readonly ANTHEM_NAME="Unsung Anthem"

echo "Running the set-up shell script for $COMPOSER_NAME $COMPOSER_VERSION, \
the build script of $ODE_NAME and $ANTHEM_NAME"

readonly GITHUB_URL="https://github.com"
readonly COMPOSER_REPO_OWNER="anttikivi"
readonly COMPOSER_REPO_NAME="couplet-composer"
readonly COMPOSER_REPO_URL="$GITHUB_URL/$COMPOSER_REPO_OWNER/\
$COMPOSER_REPO_NAME.git"

readonly ROOT_DIR="."

readonly SCRIPT_DIRECTORY_NAME="script"
readonly COMPOSER_DIRECTORY_BASE_NAME="composer"
readonly COMPOSER_DIRECTORY_NAME="${COMPOSER_DIRECTORY_BASE_NAME}_\
$(echo $COMPOSER_VERSION | tr '.' '_')"
readonly COMPOSER_HEAD_DIRECTORY_NAME="${COMPOSER_DIRECTORY_BASE_NAME}_head"

readonly SCRIPT_DIRECTORY="$ROOT_DIR/$SCRIPT_DIRECTORY_NAME"

# Install pipenv

command -v pipenv >/dev/null 2>&1 || {
  echo >&2 "Didn't find pipenv. Installing."
  pip install pipenv
}

# Set up the script directory

if [ ! -d "$SCRIPT_DIRECTORY" ]; then
  mkdir $SCRIPT_DIRECTORY
fi

# Clone Couplet Composer

if [ "$ODE_USE_DEVELOPMENT_COMPOSER" = true ]; then
  echo "Using development version of $COMPOSER_NAME"

  composer_directory="$SCRIPT_DIRECTORY/$COMPOSER_HEAD_DIRECTORY_NAME"

  # If the Composer directory doesn't exist, there is no need to check for the
  # remote HEAD SHA1.
  if [ ! -d "$composer_directory" ]; then
    echo "The directory for $COMPOSER_NAME doesn't exist and, thus, \
$COMPOSER_NAME will be cloned"

    git clone $COMPOSER_REPO_URL $composer_directory
    head_sha="$(git -C "$composer_directory" rev-parse HEAD)"

    echo "The SHA1 for the currently cloned HEAD of $COMPOSER_NAME is $head_sha"
  else
    head_sha="$(git -C $composer_directory rev-parse HEAD)"
    origin_sha="$(git -C $composer_directory rev-parse origin/develop)"

    echo "The SHA1 for the currently cloned HEAD of $COMPOSER_NAME is $head_sha"

    if [ "$head_sha" != "$origin_sha" ]; then
      echo "The SHA1 for origin/develop of $COMPOSER_NAME is $origin_sha and, \
thus, the local copy will be reset"
      git -C $composer_directory reset --hard HEAD
      git -C $composer_directory clean -xffd
      git -C $composer_directory pull
    fi
  fi
  echo "The latest development version of $COMPOSER_NAME is now set up"
else
  composer_directory="$SCRIPT_DIRECTORY/$COMPOSER_DIRECTORY_NAME"

  if [ ! -d "$composer_directory" ]; then
    git clone $COMPOSER_REPO_URL $composer_directory
    git -C $composer_directory checkout tags/$COMPOSER_VERSION_TAG -b local_install_$COMPOSER_VERSION_TAG
  fi
fi

pipenv install $composer_directory
