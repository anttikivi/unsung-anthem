#!/usr/bin/env python

# --------------------------------------------------------------------------- #
#                         Obliging Ode & Unsung Anthem
# --------------------------------------------------------------------------- #
#
# This source file is part of the Obliging Ode and Unsung Anthem projects.
#
# Copyright (C) 2019 Antti Kivi
# All rights reserved
#
# --------------------------------------------------------------------------- #


"""
This tool set up the dependencies of Obliging Ode and Unsung Anthem so you can
develop and build them.
"""


from __future__ import print_function

import os
import platform
import subprocess
import sys


USE_DEVELOP_STACK = any([(opt == "--develop-stack") for opt in sys.argv[1:]])
DRY_RUN = any([(opt == "-n" or opt == "--dry-run") for opt in sys.argv[1:]])


ODE_DEFAULT_BUILD_VERSION = "0.3.0"
ODE_BUILD_KEY = "ode-composer"


ODE_BUILD_VERSION = "develop" \
    if USE_DEVELOP_STACK \
    else ODE_DEFAULT_BUILD_VERSION


REPO_OWNER = "anttikivi"
REPO_NAME = ODE_BUILD_KEY


def caffeinate(command, env=None, dry_run=False, echo=None):
    """
    Execute a command during which system sleep is disabled. By default, this
    ignores the state of the 'shell.dry_run' flag.
    """
    # Disable system sleep, if possible.
    if platform.system() == "Darwin":
        # Don't mutate the caller's copy of the arguments.
        command = ["caffeinate"] + list(command)
    try:
        subprocess.check_call(command)
    except subprocess.CalledProcessError as e:
        SystemExit(
            "Command ended with a non-zero exit status "
            "{}".format(e.returncode))
    except OSError as e:
        SystemExit("Could not run the build script: {}".format(e.strerror))


def _run_dev():
    args = [sys.executable]
    args += [os.path.join(ODE_BUILD_KEY, "bootstrap")]
    args += sys.argv[1:]
    return caffeinate(args)


def main():
    if USE_DEVELOP_STACK:
        print(
            "Ode Composer and related project won't be downloaded as you "
            "chose the development stack")
        return _run_dev()
    else:
        # _checkout(_download_v4)
        return 0  # _run()


if __name__ == "__main__":
    sys.exit(main())
