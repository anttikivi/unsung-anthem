#!/usr/bin/env python

# utils/build-script ---------------------------------------------*- python -*-
#
# This source file is part of the Unsung Anthem open source project and is
# adapted from the Swift.org open source project.
#
# Copyright (c) 2017 Venturesome Stone
# Licensed under GNU Affero General Public License v3.0


"""
Usage:
  build-script --preset NAME [--preset-file PATH] [-n]
               [--expand-build-script-invocation]
  build-script --show-presets
  build-script [-n | --dry-run] [--clean | --clean-checkout | --clean-build]
               [--build-system NAME | --bazel | --cmake]
               [--ninja | --make | --xcode]
               [--std VERSION | --c++17 | --c++14 | --c++11]
               [--darwin-deployment-version VERSION] [--setup-clion]
               [--executable-name NAME --test-executable-name NAME]

Options:
  --preset NAME         Use the specified option preset.
  --preset-file PATH    Load presets from the specified file.

  -n, --dry-run         Print the commands that would be executed, but do not
                        execute them.

  --expand-build-script-invocation
                        Print the expanded build-script invocation generated by
                        the preset, but do not run the preset.

  --show-presets        List all presets and exit.

  -c, --clean           Do a clean build.
  --clean-checkout      Re-download the dependencies before the build.
  --clean-build         Delete the build directory before the build.

  --build-system NAME   Set the build system to be used to build Unsung Anthem.
                        Possible values are bazel and cmake [default: bazel].
  --bazel               Use Bazel to build Unsung Anthem and tests.
  --cmake               Use CMake to generate files with which Unsung Anthem
                        and tests are built.

  --ninja               Use the Ninja generator of CMake (default is Ninja).
  -m, --make            Use the Unix Makefile generator of CMake (default is
                        Ninja).
  -x, --xcode           Use the Xcode generator of CMake (default is Ninja).

  --std VERSION         Set the C++ Standard version.
  --c++17               Set the C++ Standard version to C++17.
  --c++14               Set the C++ Standard version to C++14.
  --c++11               Set the C++ Standard version to C++11.

  --darwin-deployment-version VERSION
                        The minimum deployment target version for macOS in
                        format MAJOR.MINOR.

  --setup-clion         Installs only the dependencies for CLion configuration
                        and prints the necessary CMake arguments to set into
                        CLion settings.

  --executable-name NAME
                        The name of the Unsung Anthem executable file (please
                        note that this is not a path).
  --test-executable-name NAME
                        The name of the Unsung Anthem test executable file
                        (please note that this is not a path).
"""
import json
import os
import sys
import time

from anthem_build_support.anthem_build_support import \
    (build,
     cmake,
     cpp,
     diagnostics,
     namespace,
     shell)

from anthem_build_support.anthem_build_support.call import \
    call_without_sleeping

from anthem_build_support.anthem_build_support.presets import \
    (get_all_preset_names,
     get_preset_options)

from anthem_build_support.anthem_build_support.variables import \
    (HOME,
     ANTHEM_BUILD_ROOT,
     ANTHEM_REPO_NAME,
     ANTHEM_SOURCE_ROOT)

from anthem_build_support.anthem_build_support.products import (bazel, ninja)

from anthem_build_support.anthem_build_support.targets import DeploymentTarget
from anthem_build_support.anthem_build_support.toolchain import host_toolchain
from anthem_build_support.anthem_build_support.workspace import \
    (Workspace,
     compute_build_subdir,
     compute_install_subdir)

from docopt import docopt


def initialize_runtime_environment():
    """
    Change the program environment for building.
    """

    # Set an appropriate default umask.
    os.umask(0o022)

    # Unset environment variables that might affect how tools behave.
    for v in ['MAKEFLAGS']:
        os.environ.pop(v, None)


def clean_delay():
    """
    Provide a short delay so accidentally invoked clean builds can be
    cancelled.

    :return:
    """

    sys.stdout.write('Starting clean build in  ')

    for i in range(3, 0, -1):
        sys.stdout.write('\b%d' % i)
        sys.stdout.flush()
        time.sleep(1)

    print('\b\b\b\bnow.')


def main_preset(raw_options):
    # Set the names of the files from which the presets are looked up from.
    preset_file_names = [raw_options['--preset-file']] \
        if (raw_options['--preset-file'] is not None) and not (
        len(raw_options['--preset-file']) == 0) \
        else [os.path.join(HOME, ".anthem-build-presets"),
              os.path.join(ANTHEM_SOURCE_ROOT,
                           ANTHEM_REPO_NAME,
                           "utils",
                           "build-presets.ini")]

    # If the option for only showing the presets is set, print the presets and
    # exit.
    if raw_options['--show-presets']:
        for name in sorted(get_all_preset_names(preset_file_names),
                           key=str.lower):
            print(name)
        return 0

    if raw_options['--preset'] is None:
        diagnostics.fatal("missing --preset option")

    # TODO Add parsing the preset substitutions here.

    preset_args = get_preset_options({},
                                     preset_file_names,
                                     raw_options['--preset'])

    # A function which compiles the new call to which the preset expands to.
    def assemble_arguments():

        # A recursive function that compiles the arguments into an array from
        # the docopt parsed raw arguments.
        def assemble_arguments_implementation(arguments, index):
            # Return the arguments if the preset is already iterated through
            # or call the next index recursively.
            return arguments if len(preset_args) <= index \
                else assemble_arguments_implementation(list(arguments)
                                                       + [preset_args[index]],
                                                       index + 1)

        # Return the recursive function with or without the --dry-run options
        # whether or not it is set.
        return assemble_arguments_implementation([sys.argv[0],
                                                  '--dry-run'], 0) \
            if raw_options['--dry-run'] \
            else assemble_arguments_implementation([sys.argv[0]], 0)

    build_script_args = assemble_arguments()

    diagnostics.note("using preset '"
                     + raw_options['--preset']
                     + "', which expands to \n\n"
                     + shell.quote_command(build_script_args)
                     + "\n")

    if raw_options['--expand-build-script-invocation']:
        return 0

    call_without_sleeping(build_script_args)

    return 0


def main_normal(raw_opts):
    # Get the arguments of the script as a namespace.
    args = namespace.Namespace(dry_run=raw_opts['--dry-run'],
                               clean=raw_opts['--clean'],

                               clean_checkout=raw_opts['--clean'] or raw_opts[
                                   '--clean-checkout'],

                               clean_build=raw_opts['--clean'] or raw_opts[
                                   '--clean-build'],

                               # TODO Add command line option for host target.
                               host_target=DeploymentTarget.host_target().name,

                               # TODO Add command line option for build
                               # variants.
                               anthem_build_variant='Debug',

                               # TODO Add command line option for assertions.
                               anthem_assertions=True,

                               build_system=
                               build.resolve_build_system(raw_opts),

                               cmake_generator=
                               cmake.resolve_cmake_generator(raw_opts),

                               std=cpp.resolve_standard_version(raw_opts),

                               # TODO Add command line option for the
                               # C compiler.
                               host_cc=None,

                               # TODO Add command line option for the
                               # C++ compiler.
                               host_cxx=None,

                               # TODO Add command line option for the CMake
                               # executable.
                               cmake=None,

                               # TODO Add option for setting the build
                               # subdirectory.
                               build_subdir=None,

                               # TODO Add option for setting the installation
                               # subdirectory.
                               install_subdir=None,

                               darwin_deployment_version=
                               str(raw_opts['--darwin-deployment-version'])
                               if raw_opts['--darwin-deployment-version']
                                  is not None else '10.9',

                               # TODO Add command line option for Darwin
                               # toolchain.
                               darwin_xcrun_toolchain='default',

                               setup_clion=raw_opts['--setup-clion'],

                               executable_name=raw_opts['--executable-name'],

                               test_executable_name=raw_opts[
                                   '--test-executable-name'],

                               # TODO Add command line option for tests.
                               test=True)

    # Set the dry run setting of the shell utilities.
    shell.dry_run = args.dry_run

    # Set the build subdirectory.
    build_subdir = compute_build_subdir(args) \
        if args.build_subdir is None else args.build_subdir

    # Set the installation subdirectory.
    install_subdir = compute_install_subdir(args) \
        if args.install_subdir is None else args.install_subdir

    # Create the workspace object containing the build-related directories.
    workspace = Workspace(source_root=ANTHEM_SOURCE_ROOT,
                          build_root=os.path.join(ANTHEM_BUILD_ROOT,
                                                  build_subdir),
                          install_root=os.path.join(ANTHEM_BUILD_ROOT,
                                                    install_subdir))

    # Clean build directory if requested.
    if args.clean_build:
        clean_delay()
        shell.rmtree(workspace.build_root)
        shell.rmtree(workspace.install_root)

    # Make the call of update-checkout.
    update_checkout = [os.path.join(ANTHEM_SOURCE_ROOT,
                                    ANTHEM_REPO_NAME,
                                    'utils',
                                    'update-checkout')]

    if args.clean_checkout:
        update_checkout += ['--clean']

    if not ('bazel' == args.build_system):
        update_checkout += ['--skip-repository']
        update_checkout += ['bazel']

    # Call the update-checkout script.
    call_without_sleeping(update_checkout)

    # Set the executable name.
    if args.executable_name is None:
        args.executable_name = 'unsung-anthem-%s' % args.host_target

    # Set the test executable name.
    if args.test_executable_name is None:
        args.test_executable_name = 'test-%s' % args.executable_name

    # Create the build directory.
    shell.makedirs(workspace.build_root)

    # Create the install directory.
    shell.makedirs(workspace.install_root)

    # Prepare and validate the toolchain.
    toolchain = host_toolchain(xcrun_toolchain=args.darwin_xcrun_toolchain)
    os.environ['TOOLCHAINS'] = args.darwin_xcrun_toolchain

    if args.host_cc is not None:
        toolchain.cc = args.host_cc

    diagnostics.note('The host C compiler is set to ' + toolchain.cc)

    if args.host_cxx is not None:
        toolchain.cxx = args.host_cxx

    diagnostics.note('The host C++ compiler is set to ' + toolchain.cxx)

    if args.cmake is not None:
        toolchain.cmake = args.cmake

    diagnostics.note('CMake is set to ' + toolchain.cmake)

    # Tell the user that this set-up will not build the final product but
    # rather only set it up for CLion.
    if args.setup_clion:
        diagnostics.note('The CLion set-up is enabled and thus the final '
                         'Unsung Anthem executable will not be built')

    # Build Bazel if required, which will update the toolchain.
    if 'bazel' == args.build_system:
        bazel.build(args=args, toolchain=toolchain, workspace=workspace)

    elif args.cmake_generator == 'Ninja' or toolchain.ninja is None:
        ninja.build(args=args, toolchain=toolchain, workspace=workspace)

    # Build Unsung Anthem and its dependencies.
    build.execute(args=args, toolchain=toolchain, workspace=workspace)

    # Run tests.
    if args.test:
        with shell.pushd(workspace.build_dir(args.host_target, 'anthem-test')):
            call_without_sleeping([os.path.join(
                workspace.build_dir(args.host_target, 'anthem-test'),
                args.test_executable_name)])

    return 0


def main():
    # First check if the root directory environment variable of the build is
    # set.
    if not ANTHEM_SOURCE_ROOT:
        diagnostics.fatal("could not infer source root directory (forgot to "
                          "set $ANTHEM_SOURCE_ROOT environment variable?)")

    # Then check if the root directory of the build exists and is a directory.
    if not os.path.isdir(ANTHEM_SOURCE_ROOT):
        diagnostics.fatal("source root directory \'"
                          + ANTHEM_SOURCE_ROOT
                          + "\' does not exist (forgot to set "
                            "$ANTHEM_SOURCE_ROOT environment variable?)")

    # Set the raw options of the program parsed by docopt.
    raw_opts = docopt(__doc__)

    # Determine if the script is invoked in the preset mode and dispatch
    # accordingly.
    if raw_opts['--preset'] is not None or raw_opts['--show-presets']:
        return main_preset(raw_opts)
    else:
        return main_normal(raw_opts)


if __name__ == '__main__':
    sys.exit(main())
