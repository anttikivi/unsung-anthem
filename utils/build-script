#!/usr/bin/env python

#===----------------------------- build-script ---------------*- python -*-===#
#
#                         Obliging Ode & Unsung Anthem
#
# This source file is part of the Obliging Ode and Unsung Anthem open source
# projects.
#
# Copyright (c) 2018 Venturesome Stone
# Licensed under GNU Affero General Public License v3.0


"""
Use this tool to build, test, and prepare binary distribution archives of
Unsung Anthem.

Builds Unsung Anthem and its dependencies, incrementally, optionally testing
Unsung Anthem thereafter. Different build configurations are maintained in
parallel.
"""

from __future__ import print_function

import argparse
import os
import platform
import sys

from build_utils import diagnostics, shell

from checkout import checkout

import invocation

from invocation import tools

from presets.parser import get_all_preset_names, get_preset_options

from script_support import driver_arguments, migration

from script_support.variables import HOME, ANTHEM_REPO_NAME, ANTHEM_SOURCE_ROOT

from setup.setup import set_up_build


def initialize_runtime_environment():
    """
    Change the program environment for building.
    """
    os.umask(0o022)
    # Unset environment variables that might affect how tools behave.
    for flag in ["MAKEFLAGS"]:
        os.environ.pop(flag, None)


def main_preset():
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="""Builds Unsung Anthem using a preset.""")
    parser.add_argument(
        "-n", "--dry-run",
        help="print the commands that would be executed, but do not execute "
             "them",
        action="store_true",
        default=False)
    parser.add_argument(
        "--preset-file",
        help="load presets from the specified file",
        metavar="PATH",
        action="append",
        dest="preset_file_names",
        default=[])
    parser.add_argument(
        "--preset",
        help="use the specified option preset",
        metavar="NAME")
    parser.add_argument(
        "--show-presets",
        help="list all presets and exit",
        action="store_true")
    parser.add_argument(
        "-j", "--jobs",
        help="the number of parallel build jobs to use",
        type=int,
        dest="build_jobs")
    parser.add_argument(
        "preset_substitutions_raw",
        help="'name=value' pairs that are substituted in the preset",
        nargs="*",
        metavar="SUBSTITUTION")
    parser.add_argument(
        "--expand-build-script-invocation",
        help="Print the expanded build-script invocation generated "
             "by the preset, but do not run the preset",
        action="store_true")
    args = parser.parse_args()

    if not args.preset_file_names:
        args.preset_file_names = [
            os.path.join(HOME, ".anthem-build-presets"),
            os.path.join(
                ANTHEM_SOURCE_ROOT, ANTHEM_REPO_NAME, "utils",
                "build-presets.ini"
            )
        ]

    if args.show_presets:
        for name in sorted(get_all_preset_names(args.preset_file_names),
                           key=str.lower):
            print(name)
        return 0

    if not args.preset:
        diagnostics.fatal("missing --preset option")

    args.preset_substitutions = {}

    for arg in args.preset_substitutions_raw:
        name, value = arg.split("=", 1)
        args.preset_substitutions[name] = value

    preset_args = get_preset_options(
        args.preset_substitutions, args.preset_file_names, args.preset)

    if platform.system() == "Windows":
        build_script_args = [sys.executable, sys.argv[0]]
    else:
        build_script_args = [sys.argv[0]]

    if args.dry_run:
        build_script_args += ["--dry-run"]
    build_script_args += preset_args
    if args.build_jobs:
        build_script_args += ["--jobs", str(args.build_jobs)]

    diagnostics.note(
        "using preset '" + args.preset + "', which expands to \n\n" +
        shell.quote_command(build_script_args) + "\n"
    )

    if args.expand_build_script_invocation:
        return 0

    shell.caffeinate(build_script_args)

    return 0


def main_normal():
    """
    Run the build script.
    """
    if sys.version_info.major == 2:
        diagnostics.warn("You're using Python {}".format(sys.version))
        diagnostics.warn(
            "You should really update to Python 3 to make the world a better "
            "place!"
        )
    else:
        diagnostics.fine("You're using Python {}".format(sys.version))
        diagnostics.fine("You seem to have an excellent taste!")
    parser = driver_arguments.create_argument_parser()
    args = migration.parse_args(parser, sys.argv[1:])
    set_up_build(args)
    checkout.update()
    tools.build_tools()
    invocation.invoke()
    return 0


def main():
    """
    The entry point function of the script.
    """
    if not ANTHEM_SOURCE_ROOT:
        diagnostics.fatal(
            "Could not infer source root directory (forgot to set "
            "$ANTHEM_SOURCE_ROOT environment variable?)"
        )

    if not os.path.isdir(ANTHEM_SOURCE_ROOT):
        diagnostics.fatal(
            "Source root directory '{}' does not exist (forgot to set "
            "$ANTHEM_SOURCE_ROOT environment variable?)".format(
                ANTHEM_SOURCE_ROOT
            )
        )
    if any([(opt.startswith("--preset") or opt == "--show-presets")
            for opt in sys.argv[1:]]):
        return main_preset()
    return main_normal()


if __name__ == "__main__":
    sys.exit(main())
