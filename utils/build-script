#!/usr/bin/env python

# utils/build-script ---------------------------------------------*- python -*-
#
# This source file is part of the Unsung Anthem open source project and is
# adapted from the Swift.org open source project.
#
# Copyright (c) 2017 Venturesome Stone
# Licensed under GNU Affero General Public License v3.0


"""
Usage:
    build-script --preset NAME [--preset-file PATH] [-n]
                 [--expand-build-script-invocation]
    build-script --show-presets

Options:
    --preset NAME                       Use the specified option preset.
    --preset-file PATH                  Load presets from the specified file.

    -n, --dry-run                       Print the commands that would be
                                        executed, but do not execute them.

    --expand-build-script-invocation    Print the expanded build-script
                                        invocation generated by the preset,
                                        but do not run the preset.

    --show-presets                      List all presets and exit.
"""

import os
import sys

from anthem_build_support.anthem_build_support import \
    (diagnostics,
     namespace,
     shell)

from anthem_build_support.anthem_build_support.call import \
    call_without_sleeping

from anthem_build_support.anthem_build_support.presets import \
    (get_all_preset_names,
     get_preset_options)

from anthem_build_support.anthem_build_support.variables import \
    (HOME,
     ANTHEM_REPO_NAME,
     ANTHEM_SOURCE_ROOT)

from docopt import docopt


def main_preset(raw_options):
    # Set the names of the files from which the presets are looked up from.
    preset_file_names = [raw_options['--preset-file']] \
        if (raw_options['--preset-file'] is not None) and not (len(raw_options['--preset-file']) == 0) \
        else [os.path.join(HOME, ".anthem-build-presets"),
              os.path.join(ANTHEM_SOURCE_ROOT,
                           ANTHEM_REPO_NAME,
                           "utils",
                           "build-presets.ini")]

    # If the option for only showing the presets is set, print the presets and
    # exit.
    if raw_options['--show-presets']:
        for name in sorted(get_all_preset_names(preset_file_names),
                           key=str.lower):
            print(name)
        return 0

    if raw_options['--preset'] is None:
        diagnostics.fatal("missing --preset option")

    # TODO Add parsing the preset substitutions here.

    preset_args = get_preset_options({},
                                     preset_file_names,
                                     raw_options['--preset'])

    # A function which compiles the new call to which the preset expands to.
    def assemble_arguments():

        # A recursive function that compiles the arguments into an array from
        # the docopt parsed raw arguments.
        def assemble_arguments_implementation(arguments, index):

            # Return the arguments if the preset is already iterated through
            # or call the next index recursively.
            return arguments if len(preset_args) <= index \
                else assemble_arguments_implementation(list(arguments)
                                                       + [preset_args[index]],
                                                       index + 1)

        # Return the recursive function with or without the --dry-run options
        # whether or not it is set.
        return assemble_arguments_implementation([sys.argv[0],
                                                  '--dry-run'], 0) \
            if raw_options['--dry-run'] \
            else assemble_arguments_implementation([sys.argv[0]], 0)

    build_script_args = assemble_arguments()

    diagnostics.note("using preset '"
                     + raw_options['--preset']
                     + "', which expands to \n\n"
                     + shell.quote_command(build_script_args)
                     + "\n")

    if raw_options['--expand-build-script-invocation']:
        return 0

    call_without_sleeping(build_script_args)

    return 0


def main():
    # First check if the root directory environment variable of the build is
    # set.
    if not ANTHEM_SOURCE_ROOT:
        diagnostics.fatal("could not infer source root directory (forgot to "
                          "set $ANTHEM_SOURCE_ROOT environment variable?)")

    # Then check if the root directory of the build exists and is a directory.
    if not os.path.isdir(ANTHEM_SOURCE_ROOT):
        diagnostics.fatal("source root directory \'"
                          + ANTHEM_SOURCE_ROOT
                          + "\' does not exist (forgot to set "
                            "$ANTHEM_SOURCE_ROOT environment variable?)")

    # Set the raw options of the program parsed by docopt.
    raw_opts = docopt(__doc__)

    # Determine if the script is invoked in the preset mode and dispatch
    # accordingly.
    if raw_opts['--preset'] is not None or raw_opts['--show-presets']:
        return main_preset(raw_opts)


if __name__ == '__main__':
    sys.exit(main())
