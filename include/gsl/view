//===-------------------------------- view ----------------------*- C++ -*-===//
//
//                        Obliging Ode & Unsung Anthem
//
// This source file is part of the Obliging Ode and Unsung Anthem open source
// projects.
//
// Copyright (C) 2019 Antti Kivi
// All rights reserved
//
//===----------------------------------------------------------------------===//
//
///
/// \file view
/// \brief The declarations of the guideline support library types which are
/// used as viewers for various objects and which do distinction between owning
/// and non-owning types.
/// \author Antti Kivi
/// \date 2 February 2018
/// \copyright Copyright (C) 2019 Antti Kivi
/// All rights reserved
///
//
//===----------------------------------------------------------------------===//

#ifndef ODE_GSL_VIEW
#define ODE_GSL_VIEW

# include <type_traits>

#include "gsl/assert"

namespace gsl
{
  //===--------------------------------------------------------------------===//
  //===--- GSL.view: Views ------------------------------------------------===//
  //===--------------------------------------------------------------------===//

  //===--- owner ----------------------------------------------------------===//

  ///
  /// \brief The type template of the objects which hold owning pointer.
  ///
  /// Remarks: The lifetime of the pointer must be handled manually.
  ///
  /// \tparam T a pointer type.
  ///
  template <typename T, typename = std::enable_if_t<std::is_pointer_v<T>>>
  using owner = T;

  //===--- not_null -------------------------------------------------------===//

  ///
  /// \class not_null
  /// \brief The class template of the objects which hold a pointer value which
  /// shall not be equal to \c nullptr.
  ///
  /// \tparam T the type of the object which shall be held by the object.
  ///
  template <typename T> class not_null final
  {
  public:

    static_assert(
        std::is_assignable_v<T&, std::nullptr_t>,
        "T cannot be assigned nullptr.");

    ///
    /// \brief Constructs an object of the type \c not_null.
    ///
    /// \tparam U the type of the object held by the constructed \c not_null.
    /// \tparam D a dummy template parameter which is used by the ‘Substitution
    /// Failure Is Not An Error’ language feature.
    ///
    /// \param u the object to be held by the constructed \c not_null.
    ///
    template <
        typename U,
        typename D = std::enable_if_t<std::is_convertible_v<U, T>>>
    constexpr not_null(U&& u) : ptr{std::forward<U>(u)}
    {
      Expects(ptr != nullptr);
    }

    ///
    /// \brief Constructs an object of the type \c not_null which has the same
    /// value as the original object \c o.
    ///
    /// \param o the object from which the value is copied into the constructed
    /// object.
    ///
    constexpr not_null(const not_null& o) noexcept = default;

    ///
    /// \brief Constructs an object of the type \c not_null which has the same
    /// value as the original object \c o.
    ///
    /// \tparam U the type of the object held by the constructed \c not_null.
    /// \tparam D a dummy template parameter which is used by the ‘Substitution
    /// Failure Is Not An Error’ language feature.
    ///
    /// \param o the object from which the value is copied into the constructed
    /// object.
    ///
    template <
        typename U,
        typename D = std::enable_if_t<std::is_convertible_v<U, T>>>
    constexpr not_null(const not_null<U>& o) noexcept : ptr{o.get()}
    {

    }

    ///
    /// \brief Constructs an object of the type \c not_null.
    ///
    /// \param o the object to be held by the constructed \c not_null.
    ///
    constexpr not_null(std::nullptr_t o) noexcept = delete;

    ///
    /// \brief Constructs an object of the type \c not_null and moves the value
    /// of \c o to the constructed object.
    ///
    /// \param o the object from which the value is moved into the constructed
    /// object.
    ///
    constexpr not_null(not_null&& o) noexcept = default;

    ///
    /// \brief Constructs an object of the type \c not_null and moves the value
    /// of \c o to the constructed object.
    ///
    /// \tparam U the type of the object held by the constructed \c not_null.
    /// \tparam D a dummy template parameter which is used by the ‘Substitution
    /// Failure Is Not An Error’ language feature.
    ///
    /// \param o the object from which the value is moved into the constructed
    /// object.
    ///
    template <
        typename U,
        typename D = std::enable_if_t<std::is_convertible_v<U, T>>>
    constexpr not_null(not_null<U>&& o) noexcept : ptr{std::move(o.ptr)}
    {

    }

    ///
    /// \brief Constructs an object of the type \c not_null.
    ///
    /// \param o the object to be held by the constructed \c not_null.
    ///
    constexpr not_null(std::nullptr_t&& o) noexcept = delete;

    ///
    /// \brief Destructs an object of the type \c not_null.
    ///
    ~not_null() noexcept = default;

    ///
    /// \brief Copies the values of \c o and replaces the values of \c *this by
    /// its.
    ///
    /// Remarks: This assignment operator is explicitly deleted.
    ///
    /// \param o the object of the class template \c not_null from which the
    /// values are copied.
    ///
    /// \return A reference to \c *this.
    ///
    constexpr not_null& operator=(const not_null& o) noexcept = delete;

    ///
    /// \brief Copies the values of \c o and replaces the values of \c *this by
    /// its.
    ///
    /// Remarks: This assignment operator is explicitly deleted.
    ///
    /// \param o the object of the type \c std::nullptr_t from which the values
    /// are copied.
    ///
    /// \return A reference to \c *this.
    ///
    constexpr not_null& operator=(std::nullptr_t o) noexcept = delete;

    ///
    /// \brief Moves the values of \c o and replaces the values of \c *this by
    /// its.
    ///
    /// Remarks: This assignment operator is explicitly deleted.
    ///
    /// \param o the object of the class template \c not_null from which the
    /// values are moved.
    ///
    /// \return A reference to \c *this.
    ///
    constexpr not_null& operator=(not_null&& o) noexcept = delete;

    ///
    /// \brief Moves the values of \c o and replaces the values of \c *this by
    /// its.
    ///
    /// Remarks: This assignment operator is explicitly deleted.
    ///
    /// \param o the object of the type \c std::nullptr_t from which the values
    /// are copied.
    ///
    /// \return A reference to \c *this.
    ///
    constexpr not_null& operator=(std::nullptr_t&& o) noexcept = delete;

    ///
    /// \brief The type cast operator on an object of the class template
    /// \c not_null.
    ///
    /// \return The stored pointer.
    ///
    constexpr operator T() const
    {
      return get();
    }

    ///
    /// \brief The class member access operator on an object of the class
    /// template \c not_null.
    ///
    /// \return The stored pointer.
    ///
    constexpr T operator->() const
    {
      return get();
    }

    // TODO Documentation for the explicitly deleted operators.
    not_null& operator++() = delete;
    not_null& operator--() = delete;
    not_null operator++(int) = delete;
    not_null operator--(int) = delete;
    not_null& operator+=(std::ptrdiff_t) = delete;
    not_null& operator-=(std::ptrdiff_t) = delete;
    void operator[](std::ptrdiff_t) const = delete;

    ///
    /// \brief The dereference operator on an object of the class template
    /// \c not_null.
    ///
    /// \return The object pointed by the stored pointer.
    ///
    constexpr decltype(auto) operator*() const
    {
      return *get();
    }

    ///
    /// Gives the stored pointer.
    ///
    /// \return The stored pointer.
    ///
    constexpr T get() const
    {
      Ensures(ptr != nullptr);
      return ptr;
    }

  private:
    ///
    /// \brief The value held by the object.
    ///
    const T ptr;

  }; // template <typename T> class not_null

  ///
  /// \brief The shift operator which inserts an object of the class template
  /// \c not_null into the given stream.
  ///
  /// \tparam T the type of the object which is held by the \c not_null.
  ///
  /// \param os an object of the type \c std::ostream to which the object is
  /// inserted.
  /// \param val an object of the class template \c not_null to be inserted
  /// into the stream.
  ///
  /// \return A reference of the stream object.
  ///
  template <typename T>
  std::ostream& operator<<(std::ostream& os, const not_null<T>& val)
  {
    os << val.get();
    return os;
  }

  ///
  /// \brief The comparison operator which compares two objects of the class
  /// template \c not_null for equality.
  ///
  /// \tparam T the type of the object which is held by the left-hand side
  /// \c not_null.
  /// \tparam U the type of the object which is held by the right-hand side
  /// \c not_null.
  ///
  /// \param lhs an object of the class template \c not_null.
  /// \param rhs an object of the class template \c not_null.
  ///
  /// \return \c lhs.get() == rhs.get().
  ///
  template <typename T, typename U>
  constexpr auto operator==(const not_null<T>& lhs, const not_null<U>& rhs)
  {
    return lhs.get() == rhs.get();
  }

  ///
  /// \brief The comparison operator which compares two objects of the class
  /// template \c not_null for inequality.
  ///
  /// \tparam T the type of the object which is held by the left-hand side
  /// \c not_null.
  /// \tparam U the type of the object which is held by the right-hand side
  /// \c not_null.
  ///
  /// \param lhs an object of the class template \c not_null.
  /// \param rhs an object of the class template \c not_null.
  ///
  /// \return \c lhs.get() != rhs.get().
  ///
  template <typename T, typename U>
  constexpr auto operator!=(const not_null<T>& lhs, const not_null<U>& rhs)
  {
    return lhs.get() != rhs.get();
  }

  ///
  /// \brief The comparison operator which compares two objects of the class
  /// template \c not_null.
  ///
  /// \tparam T the type of the object which is held by the left-hand side
  /// \c not_null.
  /// \tparam U the type of the object which is held by the right-hand side
  /// \c not_null.
  ///
  /// \param lhs an object of the class template \c not_null.
  /// \param rhs an object of the class template \c not_null.
  ///
  /// \return \c lhs.get() < rhs.get().
  ///
  template <typename T, typename U>
  constexpr auto operator<(const not_null<T>& lhs, const not_null<U>& rhs)
  {
    return lhs.get() < rhs.get();
  }

  ///
  /// \brief The comparison operator which compares two objects of the class
  /// template \c not_null.
  ///
  /// \tparam T the type of the object which is held by the left-hand side
  /// \c not_null.
  /// \tparam U the type of the object which is held by the right-hand side
  /// \c not_null.
  ///
  /// \param lhs an object of the class template \c not_null.
  /// \param rhs an object of the class template \c not_null.
  ///
  /// \return \c lhs.get() <= rhs.get().
  ///
  template <typename T, typename U>
  constexpr auto operator<=(const not_null<T>& lhs, const not_null<U>& rhs)
  {
    return lhs.get() <= rhs.get();
  }

  ///
  /// \brief The comparison operator which compares two objects of the class
  /// template \c not_null.
  ///
  /// \tparam T the type of the object which is held by the left-hand side
  /// \c not_null.
  /// \tparam U the type of the object which is held by the right-hand side
  /// \c not_null.
  ///
  /// \param lhs an object of the class template \c not_null.
  /// \param rhs an object of the class template \c not_null.
  ///
  /// \return \c lhs.get() > rhs.get().
  ///
  template <typename T, typename U>
  constexpr auto operator>(const not_null<T>& lhs, const not_null<U>& rhs)
  {
    return lhs.get() > rhs.get();
  }

  ///
  /// \brief The comparison operator which compares two objects of the class
  /// template \c not_null.
  ///
  /// \tparam T the type of the object which is held by the left-hand side
  /// \c not_null.
  /// \tparam U the type of the object which is held by the right-hand side
  /// \c not_null.
  ///
  /// \param lhs an object of the class template \c not_null.
  /// \param rhs an object of the class template \c not_null.
  ///
  /// \return \c lhs.get() >= rhs.get().
  ///
  template <typename T, typename U>
  constexpr auto operator>=(const not_null<T>& lhs, const not_null<U>& rhs)
  {
    return lhs.get() >= rhs.get();
  }

  // TODO: Documentation for the explicitly deleted operators.
  template <typename T, typename U>
  std::ptrdiff_t operator-(const not_null<T>&, const not_null<U>&) = delete;
  template <typename T>
  not_null<T> operator-(const not_null<T>&, std::ptrdiff_t) = delete;
  template <typename T>
  not_null<T> operator+(const not_null<T>&, std::ptrdiff_t) = delete;
  template <typename T>
  not_null<T> operator+(std::ptrdiff_t, const not_null<T>&) = delete;

} // namespace gsl

namespace std
{
  template <typename T> struct hash<gsl::not_null<T>>
  {
    constexpr size_t operator()(const gsl::not_null<T>& value) const noexcept
    {
      return hash<T>{}(value);
    }
  };

} // namespace std

#if defined(_MSC_VER) && _MSC_VER < 1910

# undef constexpr
# pragma pop_macro("constexpr")

#endif // defined(_MSC_VER) && _MSC_VER < 1910

#endif // !ODE_GSL_VIEW
